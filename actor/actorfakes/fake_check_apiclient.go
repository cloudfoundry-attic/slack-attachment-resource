// Code generated by counterfeiter. DO NOT EDIT.
package actorfakes

import (
	"sync"

	"code.cloudfoundry.org/slack-attachment-resource/actor"
	"github.com/nlopes/slack"
)

type FakeCheckAPIClient struct {
	GetGroupHistoryStub        func(group string, params slack.HistoryParameters) (*slack.History, error)
	getGroupHistoryMutex       sync.RWMutex
	getGroupHistoryArgsForCall []struct {
		group  string
		params slack.HistoryParameters
	}
	getGroupHistoryReturns struct {
		result1 *slack.History
		result2 error
	}
	getGroupHistoryReturnsOnCall map[int]struct {
		result1 *slack.History
		result2 error
	}
	GetFilesStub        func(params slack.GetFilesParameters) ([]slack.File, *slack.Paging, error)
	getFilesMutex       sync.RWMutex
	getFilesArgsForCall []struct {
		params slack.GetFilesParameters
	}
	getFilesReturns struct {
		result1 []slack.File
		result2 *slack.Paging
		result3 error
	}
	getFilesReturnsOnCall map[int]struct {
		result1 []slack.File
		result2 *slack.Paging
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCheckAPIClient) GetGroupHistory(group string, params slack.HistoryParameters) (*slack.History, error) {
	fake.getGroupHistoryMutex.Lock()
	ret, specificReturn := fake.getGroupHistoryReturnsOnCall[len(fake.getGroupHistoryArgsForCall)]
	fake.getGroupHistoryArgsForCall = append(fake.getGroupHistoryArgsForCall, struct {
		group  string
		params slack.HistoryParameters
	}{group, params})
	fake.recordInvocation("GetGroupHistory", []interface{}{group, params})
	fake.getGroupHistoryMutex.Unlock()
	if fake.GetGroupHistoryStub != nil {
		return fake.GetGroupHistoryStub(group, params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getGroupHistoryReturns.result1, fake.getGroupHistoryReturns.result2
}

func (fake *FakeCheckAPIClient) GetGroupHistoryCallCount() int {
	fake.getGroupHistoryMutex.RLock()
	defer fake.getGroupHistoryMutex.RUnlock()
	return len(fake.getGroupHistoryArgsForCall)
}

func (fake *FakeCheckAPIClient) GetGroupHistoryArgsForCall(i int) (string, slack.HistoryParameters) {
	fake.getGroupHistoryMutex.RLock()
	defer fake.getGroupHistoryMutex.RUnlock()
	return fake.getGroupHistoryArgsForCall[i].group, fake.getGroupHistoryArgsForCall[i].params
}

func (fake *FakeCheckAPIClient) GetGroupHistoryReturns(result1 *slack.History, result2 error) {
	fake.GetGroupHistoryStub = nil
	fake.getGroupHistoryReturns = struct {
		result1 *slack.History
		result2 error
	}{result1, result2}
}

func (fake *FakeCheckAPIClient) GetGroupHistoryReturnsOnCall(i int, result1 *slack.History, result2 error) {
	fake.GetGroupHistoryStub = nil
	if fake.getGroupHistoryReturnsOnCall == nil {
		fake.getGroupHistoryReturnsOnCall = make(map[int]struct {
			result1 *slack.History
			result2 error
		})
	}
	fake.getGroupHistoryReturnsOnCall[i] = struct {
		result1 *slack.History
		result2 error
	}{result1, result2}
}

func (fake *FakeCheckAPIClient) GetFiles(params slack.GetFilesParameters) ([]slack.File, *slack.Paging, error) {
	fake.getFilesMutex.Lock()
	ret, specificReturn := fake.getFilesReturnsOnCall[len(fake.getFilesArgsForCall)]
	fake.getFilesArgsForCall = append(fake.getFilesArgsForCall, struct {
		params slack.GetFilesParameters
	}{params})
	fake.recordInvocation("GetFiles", []interface{}{params})
	fake.getFilesMutex.Unlock()
	if fake.GetFilesStub != nil {
		return fake.GetFilesStub(params)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getFilesReturns.result1, fake.getFilesReturns.result2, fake.getFilesReturns.result3
}

func (fake *FakeCheckAPIClient) GetFilesCallCount() int {
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	return len(fake.getFilesArgsForCall)
}

func (fake *FakeCheckAPIClient) GetFilesArgsForCall(i int) slack.GetFilesParameters {
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	return fake.getFilesArgsForCall[i].params
}

func (fake *FakeCheckAPIClient) GetFilesReturns(result1 []slack.File, result2 *slack.Paging, result3 error) {
	fake.GetFilesStub = nil
	fake.getFilesReturns = struct {
		result1 []slack.File
		result2 *slack.Paging
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCheckAPIClient) GetFilesReturnsOnCall(i int, result1 []slack.File, result2 *slack.Paging, result3 error) {
	fake.GetFilesStub = nil
	if fake.getFilesReturnsOnCall == nil {
		fake.getFilesReturnsOnCall = make(map[int]struct {
			result1 []slack.File
			result2 *slack.Paging
			result3 error
		})
	}
	fake.getFilesReturnsOnCall[i] = struct {
		result1 []slack.File
		result2 *slack.Paging
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCheckAPIClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getGroupHistoryMutex.RLock()
	defer fake.getGroupHistoryMutex.RUnlock()
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCheckAPIClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actor.CheckAPIClient = new(FakeCheckAPIClient)
